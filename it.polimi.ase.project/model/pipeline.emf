@namespace(uri="http://www.project.ase.polimi.it/pipeline", prefix="pipeline")
package pipeline;

@gmf.diagram
class Pipeline {
  val DataFlow[+] dataFlows;
  val Task[+] tasks;
  attr String[1] ID;
  val InternalDataFlow[*] internalDataFlows;
  val Source[+] sources;
  val File[*] files;
  val Schema[+] schemas;
  val Chart[*] charts;
}

@gmf.node(label="ID")
abstract class Task {
  attr String[1] ID;
  attr int maxSpace;
  attr int maxTime;
  ref DataFlow[*]#target incoming;
  ref DataFlow[*]#source outgoing;
}

class DataFlow {
  ref Task#incoming target;
  ref Task#outgoing source;
  ref Schema[1] schema;
  attr String[1] ID;
  attr Format format;
}

abstract class Operation {
  ref InternalDataFlow#target incoming;
  ref InternalDataFlow#source outgoing;
  id attr String[1] ID;
  ref SimpleAttribute[*] inputAttributes;
}

class InternalDataFlow {
  ref Operation#outgoing source;
  ref Operation#incoming target;
  attr String[1] ID;
}

class Schema {
  val Attribute[+] attributes;
  attr String[1] name;
}

abstract class Attribute {
  attr String[1] name;
  ref Attribute#previous next;
  ref Attribute#next previous;
}

class CollectionTask extends Task {
  val ImportOperation[+] importOperations;
}

class IntegrationTask extends Task {
  val IntegrationOperation[+] integrationOperations;
}

class CleaningTask extends Task {
  val CleaningOperation[+] cleaningOperations;
}

class AnalysisTask extends Task {
  val AnalysisOperation[+] analysisOperations;
}

class VisualizationTask extends Task {
  val VisualizationOperation[+] visualizationOperations;
}

class ExportTask extends Task {
  val ExportOperation[+] exportOperations;
}

class ImportOperation {
  attr String[1] ID;
  ref Source[1] read;
  ref Schema[1] use;
}

class IntegrationOperation {
  attr String[1] ID;
  ref Attribute[+] inputAttributes;
  ref Attribute outputAttribute;
}

abstract class CleaningOperation extends Operation {
}

class PredefinedCleaningOperation extends CleaningOperation {
  attr PredefinedOperation type = "";
}

class UserDefinedCleaningOperation extends CleaningOperation {
  attr String type;
}

abstract class AnalysisOperation extends Operation {
  ref SimpleAttribute outputAttribute;
}

class ClassificationAnalysisOperation extends AnalysisOperation {
  attr ClassificationOperation type;
}

class ClusteringAnalysisOperation extends AnalysisOperation {
  attr ClusteringOperation type;
  attr int k;
}

class DescriptiveAnalysisOperation extends AnalysisOperation {
  attr DescriptiveOperation type;
}

class PredictiveAnalysisOperation extends AnalysisOperation {
  attr PredictiveOperation type;
}

class VisualizationOperation {
  ref Chart[1] chart;
  attr String[1] ID;
}

class ExportOperation {
  attr String[1] ID;
  ref File[1] write;
}

class Source {
  attr String name;
  attr String path;
  attr String serverName;
  attr int portNumber;
  attr String userName;
  attr String password;
  attr Format format;
}

class File {
  attr String name;
  attr String path;
  attr Format format;
}

class Chart {
  attr Size size;
  attr String title;
  attr ChartType type;
  ref SimpleAttribute[+] axes;
}

class SimpleAttribute extends Attribute {
  attr Type type;
}

class ComplexAttribute extends Attribute {
  val Attribute[+] attributes;
}

enum PredefinedOperation {
  removeNulls = 0;
  removeNegative = 1;
  round = 2;
  removeColumn = 3;
  removeDuplicates = 4;
}

enum ClusteringOperation {
  kMeans = 0;
  Hierarchical = 1;
}

enum ClassificationOperation {
  LogisticRegression = 0;
  LDA = 1;
  QDA = 2;
  KNN = 3;
  SVM = 4;
}

enum PredictiveOperation {
  SimpleRegression = 0;
  MultipleLinRegr = 1;
  RandomForests = 2;
}

enum DescriptiveOperation {
  Histogram = 0;
  Boxplot = 1;
  PieChart = 2;
  ScatterPlot = 4;
  ViewData = 5;
}

enum ChartType {
  Column = 0;
  Line = 1;
  Pie = 2;
  Bar = 3;
  Area = 4;
  Scatter = 5;
  Surface = 6;
  Radar = 7;
  Histogram = 8;
  BoxPlot = 9;
}

enum Format {
  CSV = 0;
  JSON = 1;
  TXT = 2;
  XML = 3;
}

enum Size {
  Small = 0;
  Medium = 1;
  Large = 2;
}

enum Type {
  mString = 0;
  mInteger = 1;
  mDouble = 2;
  mBoolean = 3;
  mDate = 4;
}


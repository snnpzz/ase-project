@namespace(uri="http://www.project.ase.polimi.it/pipeline", prefix="pipeline")
package pipeline;

@gmf.diagram
class Pipeline {
  val DataFlow[+] dataFlows;
  val Task[+] tasks;
  attr String ID;
  val InternalDataFlow[*] internalDataFlows;
  val Source[+] sources;
  val File[*] files;
  val Operation[+] operations;
}

@gmf.node(label="ID", figure="rounded")
abstract class Task {
  attr String ID;
  attr boolean isRequired;
  ref DataFlow[*]#target incoming;
  ref DataFlow[*]#source outgoing;
}

@gmf.link(source="source", target="target", width="2", target.decoration="closedarrow")
class DataFlow {
  attr Format format;
  val Schema[1] schema;
  ref Task#incoming target;
  ref Task#outgoing source;
}

@gmf.node(label="name", figure="ellipse")
abstract class Operation {
  attr String name;
  ref InternalDataFlow#target incoming;
  ref InternalDataFlow#source outgoing;
}

@gmf.link(source="source", target="target", width="2", target.decoration="arrow", style="dash")
class InternalDataFlow {
  attr Format format;
  val Schema[1] schema;
  ref Operation#outgoing source;
  ref Operation#incoming target;
}

class Schema {
  @gmf.compartment
  val Attribute[+] attributes;
}

@gmf.node(label="name")
class Attribute {
  attr String name;
  attr String type;
  ref Attribute#previous next;
  val Attribute[*] attributes;
  ref Attribute#next previous;
}

class CollectionTask extends Task {
  @gmf.compartment
  val Import[+] imports;
}

class IntegrationTask extends Task {
}

class CleaningTask extends Task {
  @gmf.compartment
  val CleaningOperation[+] operations;
}

class AnalysisTask extends Task {
  @gmf.compartment
  val AnalysisOperation[+] analyzes;
}

class VisualizationTask extends Task {
}

class ExportTask extends Task {
  @gmf.compartment
  val Export[+] exports;
}

@gmf.node(label="name", label.text="Import", figure="ellipse")
class Import {
  @gmf.link(width="2", target.decoration="square", style="dash")
  ref Source[1]#linkedTo readsFrom;
  ref Schema[1] uses;
  attr String name;
}

@gmf.node(label="name", label.text="Export", figure="ellipse")
class Export {
  @gmf.link(width="2", target.decoration="square", style="dash")
  ref File[1]#comesFrom generates;
  ref Schema[1] uses;
  attr String name;
}

class UserDefined extends CleaningOperation {
}

@gmf.node(label="name")
class Source {
  ref Import[1]#readsFrom linkedTo;
  attr String name;
  attr String path;
}

@gmf.node(label="name")
class File {
  attr String name;
  attr String path;
  ref Export[1]#generates comesFrom;
}

abstract class CleaningOperation extends Operation {
}

abstract class AnalysisOperation extends Operation {
}

@gmf.node(label="name", figure="ellipse")
class Descriptive extends AnalysisOperation {
}

class Classification extends AnalysisOperation {
}

class Predictive extends AnalysisOperation {
}

class Clustering extends AnalysisOperation {
}

class Predefined extends CleaningOperation {
}

enum Format {
  txt = 0;
  csv = 0;
  json = 0;
  xml = 0;
}


[comment encoding = UTF-8 /]
[module reportHtmlFile('http://www.project.ase.polimi.it/pipeline')]


[template public generateHtml(aPipeline : Pipeline)]
[file ('pipeline-' + aPipeline.ID + '.html', false, 'UTF-8')]
<!doctype html>
<html lang="en">
	<head>
		<title>Pipeline [aPipeline.ID/]</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
		<!-- Bootstrap CSS -->
		<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css" integrity="sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb" crossorigin="anonymous">
	</head>
	<body style="padding-top:3.5rem;">
		<header>
			<nav class="navbar navbar-expand-md navbar-dark fixed-top bg-dark">
				<h1 class="navbar-brand mb-0">Report</h1>
				<button class="navbar-toggler d-lg-none" aria-expanded="false" aria-controls="navbar" aria-label="Toogle navigation" type="button" data-target="#navbar" data-toggle="collapse">
					<span class="navbar-toggler-icon"></span>
				</button>
				<div class="collapse navbar-collapse" id="navbar">
					<ul class="navbar-nav mr-auto">
						<li class="nav-item active">
							<a class="nav-link" href="#">Pipeline [aPipeline.ID/]<span class="s-only">(current)</span></a>
						</li>
					</ul>
				</div>
			</nav>
		</header>
		<div class="container-fluid">
			<div class="row">
				<nav class="col-sm-3 col-md-2 d-none d-sm-block bg-light" style="position:fixed;top:51px;bottom:0px;left:0px;z-index:1000;padding:20px 0;overflow-x:hidden;overflow-y:auto;border-right:1px solid #eee;">
					<ul class="nav nav-pills flex-column">
						<li class="nav-item" style="border-radius:0;">
							<a class="nav-link active" href="#">Pipeline<span class="s-only">(current)</span></a>
						</li>
						<li class="nav-item" style="border-radius:0;">
							<a class="nav-link" href="#tasks">Tasks</a>
						</li>
						<li class="nav-item" style="border-radius:0;">
							<a class="nav-link" href="#operations">Operations</a>
						</li>
					</ul>
				</nav>
				<main class="col-sm-9 ml-sm-auto col-md-10 pt-3" role="main">
					<h1>Pipeline [aPipeline.ID/]</h1>
					<section>

					</section>
					<section id="tasks">
						<h2>Tasks</h2>
						<div class="table-responsive">
							<table class="table table-striped">
								<thead>
									<tr>
										<th>#</th>
										<th>ID</th>
										<th>Task Type</th>
										<th>Details</th>
									</tr>
								</thead>
								<tbody>
									[generateTableRow(1, aPipeline.tasks -> select(aTask | aTask.oclIsTypeOf(CollectionTask)) -> first())/]
								</tbody>
							</table>
						</div>
						[aPipeline.tasks -> select(aTask | aTask.oclIsTypeOf(CollectionTask)) -> first().generateTaskDiv()/]
					</section>
					<section id="operations">
						<h2>Operations</h2>
						[for (anImportOperation : ImportOperation | aPipeline.tasks -> select(aTask : Task | aTask.oclIsTypeOf(CollectionTask)) ->first().oclAsType(CollectionTask).importOperations)]
						[anImportOperation.generateImportOperationDiv()/]	
						[/for]
						[for (anIntegrationOperation : IntegrationOperation | aPipeline.tasks -> select(aTask : Task | aTask.oclIsTypeOf(IntegrationTask)) ->first().oclAsType(IntegrationTask).integrationOperations)]
						[anIntegrationOperation.generateIntegrationOperationDiv()/]	
						[/for]
						[aPipeline.tasks -> select(aTask : Task | aTask.oclIsTypeOf(CleaningTask)) -> first().oclAsType(CleaningTask).cleaningOperations -> select(aCleaningOperation : CleaningOperation | aCleaningOperation.incoming -> size() = 0) -> first().generateCleaningOperationDiv()/]	
						[aPipeline.tasks -> select(aTask : Task | aTask.oclIsTypeOf(AnalysisTask)) -> first().oclAsType(AnalysisTask).analysisOperations -> select(anAnalysisOperation : AnalysisOperation | anAnalysisOperation.incoming -> size() = 0) -> first().generateAnalysisOperationDiv()/]	
						[for (aVisualizationOperation : VisualizationOperation | aPipeline.tasks -> select(aTask : Task | aTask.oclIsTypeOf(VisualizationTask)) ->first().oclAsType(VisualizationTask).visualizationOperations)]
						[aVisualizationOperation.generateVisualizationOperationDiv()/]	
						[/for]
						[for (anExportOperation : ExportOperation | aPipeline.tasks -> select(aTask : Task | aTask.oclIsTypeOf(ExportTask)) ->first().oclAsType(ExportTask).exportOperations)]
						[anExportOperation.generateExportOperationDiv()/]	
						[/for]
					</section>			
				</main>
			</div>
		</div>
		<!-- Bootstrap JS -->
		<script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js" integrity="sha384-vFJXuSJphROIrBnz7yo7oB41mKfc8JzQZiCq4NCceLEaO4IHwicKwpJf9c9IpFgh" crossorigin="anonymous"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js" integrity="sha384-alpBpkh1PFOepccYVYDB4do5UnbKysX5WZXm3XxPqe5iKTfUKjNkCk9SaVuEZflJ" crossorigin="anonymous"></script>
	</body>
</html>
[/file]
[/template]

[template private generateAnalysisOperationDiv(anAnalysisOperation : AnalysisOperation)]
<div id="analysis-operation-[anAnalysisOperation.ID/]">
	<h3>Analysis Operation [anAnalysisOperation.ID/]</h3>
	<b>ID:</b> [anAnalysisOperation.ID/]
	<br>
	<b>Type:</b> [if (anAnalysisOperation.oclIsTypeOf(ClassificationAnalysisOperation))]Classification Analysis Operation[elseif (anAnalysisOperation.oclIsTypeOf(ClusteringAnalysisOperation))]Clustering Analysis Operation[elseif (anAnalysisOperation.oclIsTypeOf(DescriptiveAnalysisOperation))]Descriptive Analysis Operation[elseif (anAnalysisOperation.oclIsTypeOf(PredictiveAnalysisOperation))]Predictive Analysis Operation[/if]
	<br>
	<b>Name:</b> [if (anAnalysisOperation.oclIsTypeOf(ClassificationAnalysisOperation))][anAnalysisOperation.oclAsType(ClassificationAnalysisOperation).type/][elseif (anAnalysisOperation.oclIsTypeOf(ClusteringAnalysisOperation))][anAnalysisOperation.oclAsType(ClusteringAnalysisOperation).type/][elseif (anAnalysisOperation.oclIsTypeOf(DescriptiveAnalysisOperation))][anAnalysisOperation.oclAsType(DescriptiveAnalysisOperation).type/][elseif (anAnalysisOperation.oclIsTypeOf(PredictiveAnalysisOperation))][anAnalysisOperation.oclAsType(PredictiveAnalysisOperation).type/][/if]
	<br>
	[if (anAnalysisOperation.incoming -> size() > 0)]
	<span style="color:#007bff;font-size:1rem;">Input Internal Data Flow</span>
	<br>
	<b>Format:</b> [anAnalysisOperation.incoming.format/]
	<br>
	<b>Schema:</b>
	<br>
	[anAnalysisOperation.incoming.schema.generateSchemaDiv()/]
	[/if]
	[if (anAnalysisOperation.outgoing -> size() > 0)]
	<span style="color:#007bff;font-size:1rem;">Output Internal Data Flow</span>
	<br>
	<b>Format:</b> [anAnalysisOperation.outgoing.format/]
	<br>
	<b>Schema:</b>
	<br>
	[anAnalysisOperation.outgoing.schema.generateSchemaDiv()/]
	[/if]
</div>
[if not(anAnalysisOperation.outgoing.target.oclIsUndefined())]
[anAnalysisOperation.outgoing.target.oclAsType(AnalysisOperation).generateAnalysisOperationDiv()/]
[/if]
[/template]

[template private generateCleaningOperationDiv(aCleaningOperation : CleaningOperation)]
<div id="cleaning-operation-[aCleaningOperation.ID/]">
	<h3>Cleaning Operation [aCleaningOperation.ID/]</h3>
	<b>ID:</b> [aCleaningOperation.ID/]
	<br>
	<b>Type:</b> [if (aCleaningOperation.oclIsTypeOf(PredefinedCleaningOperation))]Predefined Cleaning Operation[elseif (aCleaningOperation.oclIsTypeOf(UserDefinedCleaningOperation))]User-Defined Cleaning Operation[/if]
	<br>
	<b>Name:</b> [if (aCleaningOperation.oclIsTypeOf(PredefinedCleaningOperation))][aCleaningOperation.oclAsType(PredefinedCleaningOperation).type/][elseif (aCleaningOperation.oclIsTypeOf(UserDefinedCleaningOperation))][aCleaningOperation.oclAsType(UserDefinedCleaningOperation).type/][/if]
	<br>
	[if (aCleaningOperation.incoming -> size() > 0)]
	<span style="color:#007bff;font-size:1rem;">Input Internal Data Flow</span>
	<br>
	<b>Format:</b> [aCleaningOperation.incoming.format/]
	<br>
	<b>Schema:</b>
	<br>
	[aCleaningOperation.incoming.schema.generateSchemaDiv()/]
	[/if]
	[if (aCleaningOperation.outgoing -> size() > 0)]
	<span style="color:#007bff;font-size:1rem;">Output Internal Data Flow</span>
	<br>
	<b>Format:</b> [aCleaningOperation.outgoing.format/]
	<br>
	<b>Schema:</b>
	<br>
	[aCleaningOperation.outgoing.schema.generateSchemaDiv()/]
	[/if]
</div>
[if not(aCleaningOperation.outgoing.target.oclIsUndefined())]
[aCleaningOperation.outgoing.target.oclAsType(CleaningOperation).generateCleaningOperationDiv()/]
[/if]
[/template]

[template private generateExportOperationDiv(aExportOperation : ExportOperation)]
<div id="export-operation-[aExportOperation.ID/]">
	<h3>Export Operation [aExportOperation.ID/]</h3>
	<b>ID:</b> [aExportOperation.ID/]
	<br>
	<span style="color:#007bff;font-size:1rem;">File</span>
	<div class="table-responsive">
		<table class="table table-striped">
			<thead>
				<tr>
					<td>Name</td>
					<td>Path</td>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>[aExportOperation.write.name/]</td>
					<td>[aExportOperation.write.path/]</td>
				</tr>
			</tbody>
		</table>
	</div>
	<span style="color:#007bff;font-size:1rem;">Schema</span>
	[aExportOperation.use.generateSchemaDiv()/]
</div>
[/template]

[template private generateImportOperationDiv(anImportOperation : ImportOperation)]
<div id="import-operation-[anImportOperation.ID/]">
	<h3>Import Operation [anImportOperation.ID/]</h3>
	<b>ID:</b> [anImportOperation.ID/]
	<br>
	<span style="color:#007bff;font-size:1rem;">Schema</span>
	[anImportOperation.use.generateSchemaDiv()/]
	<span style="color:#007bff;font-size:1rem;">Source</span>
	<div class="table-responsive">
		<table class="table table-striped">
			<thead>
				<tr>
					<td>Name</td>
					<td>Path</td>
					<td>Server Name</td>
					<td>Port Number</td>
					<td>Username</td>
					<td>Password</td>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>[anImportOperation.read.name/]</td>
					<td>[anImportOperation.read.path/]</td>
					<td>[anImportOperation.read.serverName/]</td>
					<td>[anImportOperation.read.portNumber/]</td>
					<td>[anImportOperation.read.userName/]</td>
					<td>[anImportOperation.read.password/]</td>
				</tr>
			</tbody>
		</table>
	</div>
</div>
[/template]

[template private generateIntegrationOperationDiv(anIntegrationOperation : IntegrationOperation)]
<div id="integration-operation-[anIntegrationOperation.ID/]">
	<h3>Operation [anIntegrationOperation.ID/]</h3>
	<b>ID:</b> [anIntegrationOperation.ID/]
	<br>
	<b>Attributes:<b>
	<div class="table-responsive">
		<table class="table table-striped">
			<thead>
				<tr>
					<td>Name</td>
					<td>Schema</td>
				</tr>
			</thead>
			<tbody>
				[for (anAttribute : Attribute | anIntegrationOperation.attributes)]
				<tr>
					<td>[anAttribute.name/]</td>
					<td>[anAttribute.eContainer(Schema).ID/]</td>
				</tr>
				[/for]
			</tbody>
		</table>
	</div>
</div>
[/template]

[template private generateVisualizationOperationDiv(aVisualizationOperation : VisualizationOperation)]
<div id="visualization-operation-[aVisualizationOperation.ID/]">
	<h3>Viualization Operation [aVisualizationOperation.ID/]</h3>
	<b>ID:</b> [aVisualizationOperation.ID/]
	<br>
	[if (aVisualizationOperation.eContainer(VisualizationTask).incoming -> size() > 0)]
	<span style="color:#007bff;font-size:1rem;">Input Internal Data Flow</span>
	<br>
	<b>Format:</b> [aVisualizationOperation.eContainer(VisualizationTask).incoming.format/]
	<br>
	<b>Schema:</b>
	[aVisualizationOperation.eContainer(VisualizationTask).incoming -> first().schema.generateSchemaDiv()/]
	[/if]
	<span style="color:#007bff;font-size:1rem;">Chart</span>
	<br>
	<b>Title:</b> [aVisualizationOperation.chart.title/]
	<br>
	<b>Type:</b> [aVisualizationOperation.chart.type/]
	<br>
	<b>Size:</b> [aVisualizationOperation.chart.size/]
	<br>
	<b>Attributes:</b>
	<br>
	<div class="table-responsive">
		<table class="table table-striped">
			<thead>
				<tr>
					<td>#</td>
					<td>Name</td>
					<td>Type</td>
				</tr>
			</thead>
			<tbody>
				[for (anAttribute : Attribute | aVisualizationOperation.chart.axes)]
				<tr>
					<td></td>
					<td>[anAttribute.name/]</td>
					<td>
						[if (anAttribute.oclIsTypeOf(SimpleAttribute))]
						Simple
						[elseif (anAttribute.oclIsTypeOf(ComplexAttribute))]
						Complex
						[/if]
					</td>
				</tr>
				[/for]
			</tbody>
		</table>
	</div>
	[if (aVisualizationOperation.eContainer(VisualizationTask).outgoing -> size() > 0)]
	<span style="color:#007bff;font-size:1rem;">Output Internal Data Flow</span>
	<br>
	<b>Format:</b> [aVisualizationOperation.eContainer(VisualizationTask).outgoing.format/]
	<br>
	<b>Schema:</b>
	<br>
	[aVisualizationOperation.eContainer(VisualizationTask).outgoing -> first().schema.generateSchemaDiv()/]
	[/if]
</div>
[/template]

[template private generateDataFlowDiv(aDataFlow : DataFlow)]
<div>
	<b>Format:</b> [aDataFlow.format/]
	<br>
	<b>Schema:</b> 
	<br>
	[aDataFlow.schema.generateSchemaDiv()/]
</div>
[/template]

[template private generateAnalysisTaskDiv(anAnalysisTask : AnalysisTask)]
<div id="task-[anAnalysisTask.ID/]">
	<h3>Task [anAnalysisTask.ID/]</h3>
	<b>ID:</b> [anAnalysisTask.ID/]
	<br>
	<b>Type:</b> Data Analysis Task
	<span style="color:#007bff;font-size:1rem;">Input Data Flow</span>
	[generateDataFlowDiv(anAnalysisTask.incoming -> first())/]
	<span style="color:#007bff;font-size:1rem;">Operation(s)</span>
	<div class="table-responsive">
		<table class="table table-striped">
			<thead>
				<tr>
					<td>#</td>
					<td>ID</td>
					<td>Analysis Operation Type</td>
					<td>Name</td>
					<td>Details</td>
				</tr>
			</thead>
			<tbody>
				[generateTableRow(0, anAnalysisTask.analysisOperations -> select(anAnalysisOperation | anAnalysisOperation.oclAsType(Operation).incoming -> size() = 0) -> first())/]
			</tbody>
		</table>
	</div>
	<span style="color:#007bff;font-size:1rem;">Output Data Flow</span>
	[generateDataFlowDiv(anAnalysisTask.outgoing -> first())/]
</div>
[/template]

[template private generateCleaningTaskDiv(aCleaningTask : CleaningTask)]
<div id="task-[aCleaningTask.ID/]">
	<h3>Task [aCleaningTask.ID/]</h3>
	<b>ID:</b> [aCleaningTask.ID/]
	<br>
	<b>Type:</b> Data Cleaning Task
	<br>
	<span style="color:#007bff;font-size:1rem;">Input Data Flow</span>
	[generateDataFlowDiv(aCleaningTask.incoming -> first())/]
	<span style="color:#007bff;font-size:1rem;">Operation(s)</span>
	<div class="table-responsive">
		<table class="table table-striped">
			<thead>
				<tr>
					<td>#</td>
					<td>ID</td>
					<td>Cleaning Operation Type</td>
					<td>Name</td>
					<td>Details</td>
				</tr>
			</thead>
			<tbody>
				[generateTableRow(0, aCleaningTask.oclAsType(CleaningTask).cleaningOperations -> select(aCleaningOperation | aCleaningOperation.oclAsType(Operation).incoming -> size() = 0) -> first())/]
			</tbody>
		</table>
	</div>
	<span style="color:#007bff;font-size:1rem;">Output Data Flow</span>
	[generateDataFlowDiv(aCleaningTask.outgoing -> first())/]
</div>
[/template]

[template private generateCollectionTaskDiv(aCollectionTask : CollectionTask)]
<div id="collection-task-[aCollectionTask.ID/]">
	<h3>Task [aCollectionTask.ID/]</h3>
	<b>ID:</b> [aCollectionTask.ID/]
	<br>
	<b>Type:</b> Data Collection
	<br>
	<span style="color:#007bff;font-size:1rem;">Input Source(s)</span>
	<div class="table-responsive">
		<table class="table table-striped">
			<thead>
				<tr>
					<td>Name</td>
					<td>Path</td>
					<td>Server Name</td>
					<td>Port Number</td>
					<td>Username</td>
					<td>Password</td>
				</tr>
			</thead>
			<tbody>
				[for (aSource : Source | aCollectionTask.importOperations.read)]
				<tr>
					<td>[aSource.name/]</td>
					<td>[aSource.path/]</td>
					<td>[aSource.serverName/]</td>
					<td>[aSource.portNumber/]</td>
					<td>[aSource.userName/]</td>
					<td>[aSource.password/]</td>
				</tr>
				[/for]
			</tbody>
		</table>
	</div>
	<span style="color:#007bff;font-size:1rem;">Import Operation(s)</span>
	<div class="table-responsive">
		<table class="table">
			<tbody>
				<tr>
				[for (anImportOperation : ImportOperation | aCollectionTask.importOperations)]
				[generateTableCell(anImportOperation)/]
				[/for]
				<tr>
			</tbody>
		</table>
	</div>
	<span style="color:#007bff;font-size:1rem;">Output Data Flow(s)</span>
	<div class="table-responsive">
		<table class="table">
			<tbody>
				<tr>
				[for (aDataFlow : DataFlow | aCollectionTask.outgoing)]
				<td>[generateDataFlowDiv(aDataFlow)/]</td>
				[/for]
				</tr>
			<tbody>
		</table>
	</div>
</div>
[/template]

[template private generateExportTaskDiv(anExportTask : ExportTask)]
<div id="task-[anExportTask.ID/]">
	<h3>Task [anExportTask.ID/]</h3>
	<b>ID:</b> [anExportTask.ID/]
	<br>
	<b>Type:</b> Data Export
	<br>
	<span style="color:#007bff;font-size:1rem;">Input Data Flow</span>
	[generateDataFlowDiv(anExportTask.incoming -> first())/]
	<span style="color:#007bff;font-size:1rem;">Export Operation(s)</span>
	<div class="table-responsive">
		<table class="table">
			<tbody>
				<tr>
					[for (anExportOperation : ExportOperation | anExportTask.exportOperations)]
					<td>
						<b>ID:</b> [anExportOperation.ID/]
						<br>
						<b>Details:</b> <a href="#export-operation-[anExportOperation.ID/]">+</a>
					</td>
					[/for]
				<tr>
			</tbody>
		</table>
	</div>
	<span style="color:#007bff;font-size:1rem;">Output File(s)</span>
	<div class="table-responsive">
		<table class="table table-striped">
			<thead>
				<tr>
					<td>Name</td>
					<td>Path</td>
				</tr>
			</thead>
			<tbody>
				[for (aFile : File | anExportTask.exportOperations.write)]
				<tr>
					<td>[aFile.name/]</td>
					<td>[aFile.path/]</td>
				</tr>
				[/for]
			</tbody>
		</table>
	</div>
</div>
[/template]

[template private generateIntegrationTaskDiv(anIntegrationTask : IntegrationTask)]
<div id="task-[anIntegrationTask.ID /]">
	<h3>Task [anIntegrationTask.ID /]</h3>
	<b>ID:</b> [anIntegrationTask.ID /]
	<br>
	<b>Type:</b> Data Integration
	<br>
	<span style="color:#007bff;">Input Data Flow(s)</span>
	<div class="table-responsive">
		<table class="table">
			<tbody>
				<tr>
				[for (aDataFlow : DataFlow | anIntegrationTask.incoming)]
				<td>[generateDataFlowDiv(aDataFlow) /]</td>
				[/for]
				</tr>
			<tbody>
		</table>
	</div>
	<span style="color:#007bff;">Integration Operation(s)</span>
	<div class="table-responsive">
		<table class="table">
			<tbody>
				<tr>
				[for (anIntegrationOperation : IntegrationOperation | anIntegrationTask.integrationOperations)]
				<td>[anIntegrationOperation.generateIntegrationOperationDiv()/]</td>
				[/for]
				</tr>
			<tbody>
		</table>
	</div>
	<span style="color:#007bff;">Output Data Flow</span>
	[for (aDataFlow : DataFlow | anIntegrationTask.oclAsType(Task).outgoing)]
	[generateDataFlowDiv(aDataFlow)/]
	[/for]
</div>
[/template]

[template private generateVisualizationTaskDiv(aVisulizationTask : VisualizationTask)]
<div id="task-[aVisulizationTask.ID/]">
	<h3>Task [aVisulizationTask.ID/]</h3>
	<b>ID:</b> [aVisulizationTask.ID/]
	<br>
	<b>Type:</b> Data Visualization
	<span style="color:#007bff;font-size:1rem;">Input Data Flow</span>
	[generateDataFlowDiv(aVisulizationTask.incoming -> first())/]
	<span style="color:#007bff;font-size:1rem;">Visualization Operation(s)</span>
	<div class="table-responsive">
		<table class="table">
			<tbody>
				<tr>
				[for (aVisualizationOperation : VisualizationOperation | aVisulizationTask.visualizationOperations)]
				<td>
					<b>ID:</b> [aVisualizationOperation.ID/]
					<br>
					<b>Details:</b> <a href="#import-operation-[aVisualizationOperation.ID/]">+</a>
				</td>
				[/for]
				<tr>
			</tbody>
		</table>
	</div>
	<span style="color:#007bff;font-size:1rem;">Output Data Flow</span>
	[generateDataFlowDiv(aVisulizationTask.outgoing -> first())/]
</div>
[/template]

[template private generateTaskDiv(aTask : Task)]
[if (aTask.oclIsTypeOf(CollectionTask))]
[aTask.oclAsType(CollectionTask).generateCollectionTaskDiv()/]		
[elseif (aTask.oclIsTypeOf(IntegrationTask))]
[aTask.oclAsType(IntegrationTask).generateIntegrationTaskDiv()/]
[elseif (aTask.oclIsTypeOf(CleaningTask))]
[aTask.oclAsType(CleaningTask).generateCleaningTaskDiv()/]
[elseif (aTask.oclIsTypeOf(AnalysisTask))]
[aTask.oclAsType(AnalysisTask).generateAnalysisTaskDiv()/]
[elseif (aTask.oclIsTypeOf(VisualizationTask))]
[aTask.oclAsType(VisualizationTask).generateVisualizationTaskDiv()/]
[elseif (aTask.oclIsTypeOf(ExportTask))]
[aTask.oclAsType(ExportTask).generateExportTaskDiv()/]
[/if]
[if not(aTask.outgoing.target -> first().oclIsUndefined())]
[aTask.outgoing.target -> first().generateTaskDiv()/]
[/if]
[/template]

[template private generateSchemaDiv(aSchema: Schema)]
<div>
	<b>ID:</b> [aSchema.ID/]
	<br>
	<b>Attributes:</b>
	<br>
	<div class="table-responsive">
		<table class="table table-striped">
			<thead>
				<tr>
					<th>#</th>
					<th>Attribute</th>
					<th>Type</th>
				</tr>
			</thead>
			<tbody>
				[generateTableRow(0, aSchema.attributes -> select(anAttribute : Attribute | anAttribute.previous -> size() = 0) -> first())/]
			</tbody>
		</table>
	</div>
</div>
[/template]

[template private generateTableCell(anImportOperation : ImportOperation)]
<td>
	<b>ID:</b> [anImportOperation.ID/]
	<br>
	<b>Details:</b> <a href="#import-operation-[anImportOperation.ID/]">+</a>
</td>
[/template]

[template private generateTableRow(aInteger : Integer, anAttribute : Attribute)]
<tr>
	<td>[aInteger/]</td>
	<td>[anAttribute.name/]</td>
	<td>[if (anAttribute.oclIsTypeOf(SimpleAttribute))]Simple Attribute[elseif (anAttribute.oclIsTypeOf(ComplexAttribute))]Complex Attribute[/if]</td>
</tr>
[if not(anAttribute.next.oclIsUndefined())]
[generateTableRow(aInteger + 1, anAttribute.next)/]
[/if]
[/template]

[template private generateTableRow(aInteger : Integer, anAnalysisOperation : AnalysisOperation)]
<tr>
	<td>[aInteger/]</td>
	<td>[anAnalysisOperation.ID/]</td>
	<td>[if (anAnalysisOperation.oclIsTypeOf(ClassificationAnalysisOperation))]Classification Analysis Operation[elseif (anAnalysisOperation.oclIsTypeOf(ClusteringAnalysisOperation))]Clustering Analysis Operation[elseif (anAnalysisOperation.oclIsTypeOf(DescriptiveAnalysisOperation))]Descriptive Analysis Operation[elseif (anAnalysisOperation.oclIsTypeOf(PredictiveAnalysisOperation))]Predictive Analysis Operation[/if]</td>
	<td>
		[if (anAnalysisOperation.oclIsTypeOf(ClassificationAnalysisOperation))]
		[anAnalysisOperation.oclAsType(ClassificationAnalysisOperation).type/]
		[elseif (anAnalysisOperation.oclIsTypeOf(ClusteringAnalysisOperation))]
		[anAnalysisOperation.oclAsType(ClusteringAnalysisOperation).type/]
		[elseif (anAnalysisOperation.oclIsTypeOf(DescriptiveAnalysisOperation))]
		[anAnalysisOperation.oclAsType(DescriptiveAnalysisOperation).type/]
		[elseif (anAnalysisOperation.oclIsTypeOf(PredictiveAnalysisOperation))]
		[anAnalysisOperation.oclAsType(PredictiveAnalysisOperation).type/]
		[/if]
	</td>
	<td><a href="#analysis-operation-[anAnalysisOperation.ID/]">+</a></td>
</tr>
[if not(anAnalysisOperation.outgoing.target.oclIsUndefined())]
[generateTableRow(aInteger + 1, anAnalysisOperation.outgoing.target.oclAsType(AnalysisOperation))/]
[/if]
[/template]

[template private generateTableRow(aInteger : Integer, aCleaningOperation : CleaningOperation)]
<tr>
	<td>[aInteger/]</td>
	<td>[aCleaningOperation.ID/]</td>
	<td>[if (aCleaningOperation.oclIsTypeOf(PredefinedCleaningOperation))]Predefined Cleaning Operation[elseif (aCleaningOperation.oclIsTypeOf(UserDefinedCleaningOperation))]User-Defined Cleaning Operation[/if]
	</td>
	<td>[if (aCleaningOperation.oclIsTypeOf(PredefinedCleaningOperation))][aCleaningOperation.oclAsType(PredefinedCleaningOperation).type/][elseif (aCleaningOperation.oclIsTypeOf(UserDefinedCleaningOperation))][aCleaningOperation.oclAsType(UserDefinedCleaningOperation).type/][/if]</td>
	<td><a href="#cleaning-operation-[aCleaningOperation.ID/]">+</a></td>
</tr>
[if not(aCleaningOperation.outgoing.target.oclIsUndefined())]
[generateTableRow(aInteger + 1, aCleaningOperation.outgoing.target.oclAsType(CleaningOperation))/]
[/if]
[/template]

[template private generateTableRow(aInteger : Integer, aTask : Task)]
<tr>
	<td>[aInteger/]</td>
	<td>[aTask.ID/]</td>
	<td>
		[if (aTask.oclIsTypeOf(CollectionTask))]
		Data Collection Task
		[elseif (aTask.oclIsTypeOf(IntegrationTask))]
		Integration Task
		[elseif (aTask.oclIsTypeOf(CleaningTask))]
		Cleaning Task
		[elseif (aTask.oclIsTypeOf(AnalysisTask))]
		Analysis Task
		[elseif (aTask.oclIsTypeOf(VisualizationTask))]
		Visualization Task
		[elseif (aTask.oclIsTypeOf(ExportTask))]
		Export Task
		[/if]
	</td>
	<td><a href="#task-[aTask.ID/]">+</a></td>
</tr>
[if not(aTask.outgoing -> first().target.oclIsUndefined())]
[generateTableRow(aInteger + 1, aTask.outgoing -> first().target)/]
[/if]
[/template]

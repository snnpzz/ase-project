@namespace(uri="http://www.project.ase.polimi.it/pipeline", prefix="pipeline")
package pipeline;

@gmf.diagram
class Pipeline {
  val DataFlow[+] dataFlows;
  val Task[+] tasks;
  attr String ID;
  val InternalDataFlow[*] internalDataFlows;
  val Source[+] sources;
  val File[*] files;
  val Schema[+] schemas;
  val Chart[*] charts;
}

@gmf.node(label="ID", figure="rounded")
abstract class Task {
  attr String ID;
  ref DataFlow[*]#target incoming;
  ref DataFlow[*]#source outgoing;
}

@gmf.link(source="source", target="target", width="2", target.decoration="filledclosedarrow")
class DataFlow {
  attr Format format;
  ref Task#incoming target;
  ref Task#outgoing source;

  @gmf.link(width="1", target.decoration="arrow", tool.name="DFSchema", style="dot")
  ref Schema[1] schema;
}

@gmf.node(label="name", figure="ellipse")
abstract class Operation {
  ref InternalDataFlow#target incoming;
  ref InternalDataFlow#source outgoing;
  attr String ID;
}

@gmf.link(source="source", target="target", width="2", target.decoration="filledclosedarrow", style="dash")
class InternalDataFlow {
  attr Format format;
  ref Operation#outgoing source;
  ref Operation#incoming target;

  @gmf.link(width="1", target.decoration="arrow", style="dot", tool.name="InternalDFSchema")
  ref Schema[1] schema;
}

@gmf.node(label="name", label.placement="none", figure="rounded")
class Schema {

  @gmf.compartment(layout="list")
  val Attribute[+] attributes;
  attr String name;
}

@gmf.node(label="name")
abstract class Attribute {
  attr String name;
  ref Attribute#previous next;
  ref Attribute#next previous;
}

class CollectionTask extends Task {

  @gmf.compartment
  val ImportOperation[+] importOperations;
}

class IntegrationTask extends Task {

  @gmf.link(width="2", target.decoration="closedarrow", tool.name="IntegrationAttributes")
  ref Attribute[+] attributes;
}

class CleaningTask extends Task {

  @gmf.compartment
  val CleaningOperation[+] cleaningOperations;
}

class AnalysisTask extends Task {

  @gmf.compartment
  val AnalysisOperation[+] analysisOperations;
}

class VisualizationTask extends Task {
  val VisualizationOperation[+] visualizationOperations;
}

class ExportTask extends Task {

  @gmf.compartment
  val ExportOperation[+] exportOperations;
}

@gmf.node(label="ID", label.text="Import", figure="ellipse")
class ImportOperation {

  @gmf.link(width="2", target.decoration="square", style="dash")
  ref Source[1]#linkedTo read;

  @gmf.link(width="1", target.decoration="arrow")
  ref Schema[1] impUses;
  id attr String ID;
}

@gmf.node(label="ID", label.text="Export", figure="ellipse")
class ExportOperation {

  @gmf.link(width="2", target.decoration="filledsquare", style="dash")
  ref File[1]#comesFrom write;

  @gmf.link(width="1", target.decoration="arrow")
  ref Schema[1] expUses;
  id attr String ID;
}

class UserDefinedCleaningOperation extends CleaningOperation {
  attr String name;
}

@gmf.node(label="name")
class Source {
  ref ImportOperation[1]#read linkedTo;
  attr String name;
  attr String path;
  attr String serverName;
  attr int portNumber;
  attr String userName;
  attr String password;
}

@gmf.node(label="name")
class File {
  attr String name;
  attr String path;
  ref ExportOperation[1]#write comesFrom;
}

@gmf.node(label="title", figure="rounded")
class Chart {
  attr Size size;
  attr String title;
  attr ChartType type;

  @gmf.link(width="1", target.decoration="closedarrow")
  ref SimpleAttribute[+] axes;
}

abstract class CleaningOperation extends Operation {
}

abstract class AnalysisOperation extends Operation {
}

class DescriptiveAnalysisOperation extends AnalysisOperation {
  attr DescriptiveOperation name;
}

class ClassificationAnalysisOperation extends AnalysisOperation {
  attr ClassificationOperation name;
}

class PredictiveAnalysisOperation extends AnalysisOperation {
  attr PredictiveOperation name;
}

class ClusteringAnalysisOperation extends AnalysisOperation {
  attr ClusteringOperation name;
  attr int k;
}

class PredefinedCleaningOperation extends CleaningOperation {
  attr PredefinedOperation name = "";
}

class SimpleAttribute extends Attribute {
  attr Type type;
}

class ComplexAttribute extends Attribute {

  @gmf.compartment(layout="list")
  val Attribute[+] attributes;
}

enum PredefinedOperation {
  removeNulls = 0;
  removeNegative = 1;
  round = 2;
}

enum ClusteringOperation {
  kMeans = 0;
  kMedoids = 1;
  fuzzyCMeans = 2;
  QT = 3;
}

enum ClassificationOperation {
  LogisticRegression = 0;
  LDA = 1;
  QDA = 2;
  KNN = 3;
  SVM = 4;
}

enum PredictiveOperation {
  SimpleRegression = 0;
  MultipleLinRegr = 1;
  RandomForests = 2;
}

enum DescriptiveOperation {
  Histogram = 0;
  Boxplot = 1;
  PieChart = 2;
}

enum ChartType {
  Column = 0;
  Line = 0;
  Pie = 0;
  Doughnut = 0;
  Bar = 0;
  Area = 0;
  Scatter = 0;
  Bubble = 0;
  Map = 0;
  Stock = 0;
  Surface = 0;
  Radar = 0;
  Treemap = 0;
  Sunburst = 0;
  Histogram = 0;
  BoxAndWhisker = 0;
  Waterfall = 0;
  Funnel = 0;
  Combo = 0;
}

enum Format {
  CSV = 0;
  JSON = 1;
  TXT = 2;
  XML = 3;
}

enum Size {
  Small = 0;
  Medium = 1;
  Large = 2;
}

enum Type {
  mString = 0;
  mInteger = 1;
  mDouble = 2;
  mBoolean = 3;
  mDate = 4;
}

class VisualizationOperation {
  ref Chart[1] chart;
  id attr String ID;
}


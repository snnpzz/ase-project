@namespace(uri="http://www.project.ase.polimi.it/pipeline", prefix="pipeline")
package pipeline;

@gmf.diagram
class Pipeline {
  val DataFlow[+] dataFlows;
  val Task[+] tasks;
  attr String ID;
  val InternalDataFlow[*] internalDataFlows;
  val Source[+] sources;
  val File[*] files;
  val Operation[+] operations;
  val Schema[+] schemas;
}

@gmf.node(label="ID", figure="rounded")
abstract class Task {
  attr String ID;
  ref DataFlow[*]#target incoming;
  ref DataFlow[*]#source outgoing;
}

@gmf.link(source="source", target="target", width="2", target.decoration="closedarrow")
class DataFlow {
  attr Format format;
  ref Task#incoming target;
  ref Task#outgoing source;

  @gmf.link(width="1", target.decoration="arrow", style="dash")
  ref Schema[1] schema;
}

@gmf.node(label="name", figure="ellipse")
abstract class Operation {
  attr String name;
  ref InternalDataFlow#target incoming;
  ref InternalDataFlow#source outgoing;
}

@gmf.link(source="source", target="target", width="2", target.decoration="arrow", style="dash")
class InternalDataFlow {
  attr Format format;
  ref Operation#outgoing source;
  ref Operation#incoming target;

  @gmf.link(width="1", target.decoration="arrow", style="dash")
  ref Schema[1] intDFschema;
}

@gmf.node(label="name", label.placement="none", figure="rounded")
class Schema {

  @gmf.compartment(layout="list")
  val Attribute[+] attributes;
  attr String name;
}

@gmf.node(label="name")
class Attribute {
  attr String name;
  attr String type;
  ref Attribute#previous next;

  @gmf.compartment(layout="list")
  val Attribute[*] attributes;
  ref Attribute#next previous;
}

class CollectionTask extends Task {

  @gmf.compartment
  val Import[+] imports;
}

class IntegrationTask extends Task {
  ref Attribute[+] attributes;
}

class CleaningTask extends Task {

  @gmf.compartment
  val CleaningOperation[+] cleaningOperations;
}

class AnalysisTask extends Task {

  @gmf.compartment
  val AnalysisOperation[+] analysisOperations;
}

class VisualizationTask extends Task {
  attr Size size;
}

class ExportTask extends Task {

  @gmf.compartment
  val Export[+] exports;
}

@gmf.node(label="name", label.text="Import", figure="ellipse")
class Import {

  @gmf.link(width="2", target.decoration="square", style="dash")
  ref Source[1]#linkedTo readsFrom;

  @gmf.link(width="1", target.decoration="arrow")
  ref Schema[1] impUses;
  attr String name;
}

@gmf.node(label="name", label.text="Export", figure="ellipse")
class Export {

  @gmf.link(width="2", target.decoration="square", style="dash")
  ref File[1]#comesFrom generates;

  @gmf.link(width="1", target.decoration="arrow")
  ref Schema[1] expUses;
  attr String name;
}

class UserDefined extends CleaningOperation {
}

@gmf.node(label="name")
class Source {
  ref Import[1]#readsFrom linkedTo;
  attr String name;
  attr String path;
}

@gmf.node(label="name")
class File {
  attr String name;
  attr String path;
  ref Export[1]#generates comesFrom;
}

abstract class CleaningOperation extends Operation {
}

abstract class AnalysisOperation extends Operation {
}

class Descriptive extends AnalysisOperation {
}

class Classification extends AnalysisOperation {
}

class Predictive extends AnalysisOperation {
}

class Clustering extends AnalysisOperation {
  attr int k;
}

class Predefined extends CleaningOperation {
}

enum Format {
  txt = 0;
  csv = 0;
  json = 0;
  XML = 0;
}

enum Size {
  Small = 0;
  Medium = 0;
  Large = 0;
}

